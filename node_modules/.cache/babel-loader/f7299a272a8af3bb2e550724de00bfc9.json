{"ast":null,"code":"var _jsxFileName = \"/Users/dmendoza/Documents/react-projects/todo-hooks-final/src/components/NewTodoSection.js\";\nimport React from 'react';\n\nconst SubmitBtn = ({\n  todoItem,\n  setTodoItem,\n  setTodoList,\n  todoList,\n  setErrorState\n}) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (todoItem.todo !== '') {\n      const newTodoList = [...todoList, todoItem];\n      setTodoList(newTodoList);\n      setTodoItem({\n        todo: '',\n        completed: false\n      });\n      setErrorState({\n        isThereError: false,\n        errorMsg: ''\n      });\n    } else {\n      setErrorState({\n        isThereError: true,\n        errorMsg: 'Task field cannot be left empty!'\n      });\n    }\n  };\n\n  const handleInputChange = e => {\n    e.preventDefault();\n    const todoItm = {\n      todo: e.target.value,\n      completed: false\n    };\n    setTodoItem(todoItm);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    onChange: handleInputChange,\n    className: \"todo-input\",\n    value: todoItem.todo,\n    placeholder: \"What needs to be done?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    className: \"submit-todo-btn btn\",\n    type: \"submit\",\n    value: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })));\n};\n\nexport default SubmitBtn;","map":{"version":3,"sources":["/Users/dmendoza/Documents/react-projects/todo-hooks-final/src/components/NewTodoSection.js"],"names":["React","SubmitBtn","todoItem","setTodoItem","setTodoList","todoList","setErrorState","handleSubmit","e","preventDefault","todo","newTodoList","completed","isThereError","errorMsg","handleInputChange","todoItm","target","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,WAAX;AAAwBC,EAAAA,WAAxB;AAAqCC,EAAAA,QAArC;AAA+CC,EAAAA;AAA/C,CAAD,KAAmE;AACnF,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAGP,QAAQ,CAACQ,IAAT,KAAkB,EAArB,EAAyB;AACvB,YAAMC,WAAW,GAAG,CAAC,GAAGN,QAAJ,EAAcH,QAAd,CAApB;AACAE,MAAAA,WAAW,CAACO,WAAD,CAAX;AACAR,MAAAA,WAAW,CAAC;AACRO,QAAAA,IAAI,EAAE,EADE;AAERE,QAAAA,SAAS,EAAE;AAFH,OAAD,CAAX;AAIAN,MAAAA,aAAa,CAAC;AACZO,QAAAA,YAAY,EAAE,KADF;AAEZC,QAAAA,QAAQ,EAAE;AAFE,OAAD,CAAb;AAID,KAXD,MAWO;AACLR,MAAAA,aAAa,CAAC;AACZO,QAAAA,YAAY,EAAE,IADF;AAEZC,QAAAA,QAAQ,EAAE;AAFE,OAAD,CAAb;AAID;AACF,GAnBD;;AAqBA,QAAMC,iBAAiB,GAAGP,CAAC,IAAI;AAC7BA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMO,OAAO,GAAG;AACdN,MAAAA,IAAI,EAAGF,CAAC,CAACS,MAAF,CAASC,KADF;AAEdN,MAAAA,SAAS,EAAG;AAFE,KAAhB;AAIAT,IAAAA,WAAW,CAACa,OAAD,CAAX;AACD,GAPD;;AASA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,QAAQ,EAAET,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,QAAQ,EAAIQ,iBAFd;AAGE,IAAA,SAAS,EAAC,YAHZ;AAIE,IAAA,KAAK,EAAEb,QAAQ,CAACQ,IAJlB;AAKE,IAAA,WAAW,EAAC,wBALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AACE,IAAA,SAAS,EAAC,qBADZ;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,KAAK,EAAC,QAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,CADF;AAkBD,CAjDD;;AAmDA,eAAeT,SAAf","sourcesContent":["import React from 'react';\n\nconst SubmitBtn = ({todoItem, setTodoItem, setTodoList, todoList, setErrorState}) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(todoItem.todo !== '') {\n      const newTodoList = [...todoList, todoItem];\n      setTodoList(newTodoList);\n      setTodoItem({\n          todo: '',\n          completed: false\n      });\n      setErrorState({\n        isThereError: false,\n        errorMsg: ''\n      })\n    } else {\n      setErrorState({\n        isThereError: true,\n        errorMsg: 'Task field cannot be left empty!'\n      })\n    }\n  };\n\n  const handleInputChange = e => {\n    e.preventDefault();\n    const todoItm = {\n      todo : e.target.value,\n      completed : false\n    }\n    setTodoItem(todoItm)\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange = {handleInputChange}\n          className=\"todo-input\"\n          value={todoItem.todo}\n          placeholder=\"What needs to be done?\"\n        />\n        <input\n          className=\"submit-todo-btn btn\"\n          type=\"submit\"\n          value=\"submit\"\n        />\n      </form>\n    </div>\n  )\n}\n\nexport default SubmitBtn;\n"]},"metadata":{},"sourceType":"module"}